/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ Android
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç fallback
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏ —Å–∫—Ä—ã—Ç–∏—è –ø—É—Å—Ç—ã—Ö badges
function updateHeaderCounters() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ö–µ–¥–µ—Ä–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    const favoritesCount = favorites.length;
    const cartCount = cart.length;
    
    console.log(`üìä –°—á–µ—Ç—á–∏–∫–∏: –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ${favoritesCount}, –ö–æ—Ä–∑–∏–Ω–∞: ${cartCount}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ badges
    const badges = document.querySelectorAll('.badge');
    badges.forEach(badge => {
        if (badge.id === 'favorites-badge' || badge.classList.contains('mobile-favorites-badge')) {
            badge.textContent = favoritesCount;
            badge.setAttribute('data-count', favoritesCount);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø—É—Å—Ç–æ
            if (favoritesCount === 0) {
                badge.style.display = 'none';
            } else {
                badge.style.display = 'block';
            }
        }
        
        if (badge.id === 'cart-badge' || badge.classList.contains('mobile-cart-badge')) {
            badge.textContent = cartCount;
            badge.setAttribute('data-count', cartCount);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø—É—Å—Ç–æ
            if (cartCount === 0) {
                badge.style.display = 'none';
            } else {
                badge.style.display = 'block';
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function forceImageReload() {
    const images = document.querySelectorAll('.icon-image');
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...', images.length);
    
    images.forEach((img, index) => {
        const originalSrc = img.src.split('?')[0]; // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–µ—Ä—Å–∏–∏
        const newSrc = originalSrc + '?v=' + Date.now() + '&force=' + Math.random();
        
        console.log(`üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index + 1}:`, originalSrc);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        const newImg = new Image();
        
        newImg.onload = function() {
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', originalSrc);
            img.src = newSrc;
            img.style.display = 'block';
            // –°–∫—Ä—ã–≤–∞–µ–º fallback –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
            const fallback = img.nextElementSibling;
            if (fallback && fallback.classList.contains('icon-fallback')) {
                fallback.style.display = 'none';
            }
        };
        
        newImg.onerror = function() {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', originalSrc);
            img.style.display = 'none';
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
            const fallback = img.nextElementSibling;
            if (fallback && fallback.classList.contains('icon-fallback')) {
                fallback.style.display = 'flex';
            }
        };
        
        newImg.src = newSrc;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function checkAndFixImages() {
    const images = document.querySelectorAll('.icon-image');
    let brokenImages = 0;
    
    images.forEach(img => {
        if (!img.complete || img.naturalHeight === 0) {
            brokenImages++;
            console.warn('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.src);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
            img.style.display = 'none';
            const fallback = img.nextElementSibling;
            if (fallback && fallback.classList.contains('icon-fallback')) {
                fallback.style.display = 'flex';
            }
        }
    });
    
    if (brokenImages > 0) {
        console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${brokenImages} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...`);
        setTimeout(forceImageReload, 1000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
function addImageErrorHandlers() {
    const images = document.querySelectorAll('.icon-image');
    
    images.forEach(img => {
        img.addEventListener('error', function() {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src);
            this.style.display = 'none';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
            const fallback = this.nextElementSibling;
            if (fallback && fallback.classList.contains('icon-fallback')) {
                fallback.style.display = 'flex';
            }
        });
        
        img.addEventListener('load', function() {
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', this.src);
            this.style.display = 'block';
            
            // –°–∫—Ä—ã–≤–∞–µ–º fallback
            const fallback = this.nextElementSibling;
            if (fallback && fallback.classList.contains('icon-fallback')) {
                fallback.style.display = 'none';
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isAndroidDevice() {
    return /Android/i.test(navigator.userAgent) || 
           /Android/i.test(navigator.platform) ||
           window.Telegram?.WebApp?.platform === 'android';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initImageFix() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', navigator.userAgent);
    console.log('ü§ñ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isAndroidDevice());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    addImageErrorHandlers();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    updateHeaderCounters();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            checkAndFixImages();
            updateHeaderCounters();
        });
    } else {
        checkAndFixImages();
        updateHeaderCounters();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
    setTimeout(function() {
        checkAndFixImages();
        updateHeaderCounters();
    }, 2000);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isAndroidDevice()) {
        console.log('ü§ñ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
        setTimeout(function() {
            forceImageReload();
            updateHeaderCounters();
        }, 3000);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ localStorage
    window.addEventListener('storage', function(e) {
        if (e.key === 'favorites' || e.key === 'cart') {
            console.log('üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ localStorage, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏...');
            updateHeaderCounters();
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
initImageFix();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.forceImageReload = forceImageReload;
window.checkAndFixImages = checkAndFixImages;
window.updateHeaderCounters = updateHeaderCounters;
