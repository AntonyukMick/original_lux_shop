/**
 * –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
 */

console.log('common-functions.js loaded');

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∫–æ—Ä–∑–∏–Ω–∞)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function updateHeaderCounters() {
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - –î–ï–°–ö–¢–û–ü
    const favoritesBadge = document.querySelector('.favorites-badge');
    if (favoritesBadge) {
        if (favorites.length > 0) {
            favoritesBadge.textContent = favorites.length;
            favoritesBadge.style.display = 'block';
        } else {
            favoritesBadge.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - –ú–û–ë–ò–õ–¨–ù–´–ô
    const mobileFavoritesBadge = document.querySelector('.mobile-favorites-badge');
    if (mobileFavoritesBadge) {
        if (favorites.length > 0) {
            mobileFavoritesBadge.textContent = favorites.length;
            mobileFavoritesBadge.style.display = 'block';
        } else {
            mobileFavoritesBadge.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã - –î–ï–°–ö–¢–û–ü
    const cartBadge = document.querySelector('.cart-badge');
    if (cartBadge) {
        const totalItems = cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
        if (totalItems > 0) {
            cartBadge.textContent = totalItems;
            cartBadge.style.display = 'block';
        } else {
            cartBadge.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã - –ú–û–ë–ò–õ–¨–ù–´–ô
    const mobileCartBadge = document.querySelector('.mobile-cart-badge');
    if (mobileCartBadge) {
        const totalItems = cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
        if (totalItems > 0) {
            mobileCartBadge.textContent = totalItems;
            mobileCartBadge.style.display = 'block';
        } else {
            mobileCartBadge.style.display = 'none';
        }
    }
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å home.blade.php
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ –∏ updateHeaderCounters
 */
function updateHeaderCountersSimple() {
    updateHeaderCounters();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ (–≤ –∫–æ—Ä–∑–∏–Ω–µ/–∏–∑–±—Ä–∞–Ω–Ω–æ–º)
 * @param {number} productId - ID —Ç–æ–≤–∞—Ä–∞
 * @param {string} type - 'cart' –∏–ª–∏ 'favorites'
 */
function updateProductStatus(productId, type) {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    
    const isInCart = cart.some(item => item.id === productId);
    const isInFavorites = favorites.includes(productId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    const addToCartBtn = document.querySelector(`[data-product-id="${productId}"][data-action="add-to-cart"]`);
    if (addToCartBtn) {
        if (isInCart) {
            addToCartBtn.innerHTML = '–í –∫–æ—Ä–∑–∏–Ω–µ';
            addToCartBtn.style.background = '#48bb78';
            addToCartBtn.style.color = '#ffffff';
        } else {
            addToCartBtn.innerHTML = '–í –∫–æ—Ä–∑–∏–Ω—É';
            addToCartBtn.style.background = '#527ea6';
            addToCartBtn.style.color = '#ffffff';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const favoriteBtn = document.querySelector(`[data-product-id="${productId}"][data-action="toggle-favorite"]`);
    if (favoriteBtn) {
        if (isInFavorites) {
            favoriteBtn.innerHTML = '‚ù§Ô∏è';
            favoriteBtn.style.background = '#ef4444';
            favoriteBtn.style.color = '#ffffff';
        } else {
            favoriteBtn.innerHTML = 'ü§ç';
            favoriteBtn.style.background = '#ffffff';
            favoriteBtn.style.color = '#000000';
        }
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */
async function syncCartWithServer() {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    try {
        const response = await fetch('/cart/sync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
            },
            body: JSON.stringify({ cart: cart })
        });
        
        if (response.ok) {
            console.log('–ö–æ—Ä–∑–∏–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */
async function syncFavoritesWithServer() {
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    
    try {
        const response = await fetch('/favorites/sync', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
            },
            body: JSON.stringify({ favorites: favorites })
        });
        
        if (response.ok) {
            console.log('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
 * @param {number|string} productId - ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * @param {number} quantity - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è title –≤–º–µ—Å—Ç–æ ID)
 * @param {number} price - –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è title)
 * @param {string} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è title)
 */
function addToCart(productId, quantity = 1, title = null, price = null, image = null) {
    console.log('addToCart called with:', { productId, quantity, title, price, image });
    
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω title, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (title) {
        const existingItem = cart.find(item => item.title === title);
        if (existingItem) {
            existingItem.quantity = (existingItem.quantity || 1) + quantity;
        } else {
            cart.push({ title, price, image, quantity: quantity });
        }
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å ID
        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ id: productId, quantity: quantity });
        }
    }
    
    localStorage.setItem('cart', JSON.stringify(cart));
    console.log('Cart updated:', cart);
    
    updateHeaderCounters();
    updateProductStatus(productId, 'cart');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    syncCartWithServer();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', 'success');
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
 * @param {number|string} productId - ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è title –≤–º–µ—Å—Ç–æ ID)
 */
function removeFromCart(productId, title = null) {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    let filteredCart;
    if (title) {
        filteredCart = cart.filter(item => item.title !== title);
    } else {
        filteredCart = cart.filter(item => item.id !== productId);
    }
    
    localStorage.setItem('cart', JSON.stringify(filteredCart));
    
    updateHeaderCounters();
    updateProductStatus(productId, 'cart');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    syncCartWithServer();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'info');
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
 * @param {number|string} productId - ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è title –≤–º–µ—Å—Ç–æ ID)
 */
function toggleFavorite(productId, title = null) {
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    
    let index;
    if (title) {
        index = favorites.findIndex(item => item.title === title);
    } else {
        index = favorites.indexOf(productId);
    }
    
    if (index > -1) {
        favorites.splice(index, 1);
        showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'info');
    } else {
        if (title) {
            favorites.push({ title: title });
        } else {
            favorites.push(productId);
        }
        showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'success');
    }
    
    localStorage.setItem('favorites', JSON.stringify(favorites));
    updateHeaderCounters();
    updateProductStatus(productId, 'favorites');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    syncFavoritesWithServer();
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('success', 'error', 'info', 'warning')
 */
function showNotification(message, type = 'info') {
    console.log('showNotification called:', message, type);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        max-width: 300px;
    `;
    
    // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const colors = {
        success: '#48bb78',
        error: '#ef4444',
        info: '#527ea6',
        warning: '#f59e0b'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è email
 * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ email –≤–∞–ª–∏–¥–Ω—ã–π
 */
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {string} phone - –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
 */
function validatePhone(phone) {
    const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
    return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''));
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
 * @param {HTMLFormElement} form - –§–æ—Ä–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {boolean} - true –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞
 */
function validateForm(form) {
    let isValid = true;
    const errors = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = form.querySelectorAll('[required]');
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            isValid = false;
            const fieldName = field.getAttribute('name') || field.getAttribute('id') || '–ø–æ–ª–µ';
            errors.push(`–ü–æ–ª–µ "${fieldName}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
            showFieldError(field, '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
        } else {
            clearFieldError(field);
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –ø–æ–ª—è
    const emailFields = form.querySelectorAll('input[type="email"]');
    emailFields.forEach(field => {
        if (field.value && !validateEmail(field.value)) {
            isValid = false;
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
            showFieldError(field, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    const phoneFields = form.querySelectorAll('input[type="tel"], input[name*="phone"]');
    phoneFields.forEach(field => {
        if (field.value && !validatePhone(field.value)) {
            isValid = false;
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            showFieldError(field, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–æ–ª—è
    const urlFields = form.querySelectorAll('input[type="url"]');
    urlFields.forEach(field => {
        if (field.value && !validateUrl(field.value)) {
            isValid = false;
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
            showFieldError(field, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏
    const passwordFields = form.querySelectorAll('input[type="password"]');
    passwordFields.forEach(field => {
        if (field.value && field.value.length < 6) {
            isValid = false;
            errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            showFieldError(field, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const passwordConfirmation = form.querySelector('input[name*="password_confirmation"]');
    const password = form.querySelector('input[name="password"]');
    if (passwordConfirmation && password && passwordConfirmation.value !== password.value) {
        isValid = false;
        errors.push('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        showFieldError(passwordConfirmation, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    const numberFields = form.querySelectorAll('input[type="number"]');
    numberFields.forEach(field => {
        if (field.value && isNaN(field.value)) {
            isValid = false;
            errors.push('–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞');
            showFieldError(field, '–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞');
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    if (!isValid) {
        showNotification(errors.join(', '), 'error');
    }
    
    return isValid;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
 * @param {HTMLElement} field - –ü–æ–ª–µ —Ñ–æ—Ä–º—ã
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function showFieldError(field, message) {
    field.style.borderColor = '#ef4444';
    field.style.boxShadow = '0 0 0 3px rgba(239, 68, 68, 0.1)';
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
    const existingError = field.parentNode.querySelector('.field-error');
    if (existingError) {
        existingError.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
    const errorDiv = document.createElement('div');
    errorDiv.className = 'field-error';
    errorDiv.textContent = message;
    errorDiv.style.cssText = `
        color: #ef4444;
        font-size: 12px;
        margin-top: 4px;
        font-weight: 500;
    `;
    
    field.parentNode.appendChild(errorDiv);
}

/**
 * –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
 * @param {HTMLElement} field - –ü–æ–ª–µ —Ñ–æ—Ä–º—ã
 */
function clearFieldError(field) {
    field.style.borderColor = '#cbd5e1';
    field.style.boxShadow = '';
    
    const existingError = field.parentNode.querySelector('.field-error');
    if (existingError) {
        existingError.remove();
    }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è URL
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π
 */
function validateUrl(url) {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
 * @param {string} name - –ò–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ –∏–º—è –≤–∞–ª–∏–¥–Ω–æ–µ
 */
function validateName(name) {
    const nameRegex = /^[–∞-—è—ë\s]+$/i;
    return nameRegex.test(name) && name.trim().length >= 2;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
 * @param {string} address - –ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π
 */
function validateAddress(address) {
    return address.trim().length >= 5;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
 * @param {string|number} price - –¶–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è
 */
function validatePrice(price) {
    const numPrice = parseFloat(price);
    return !isNaN(numPrice) && numPrice > 0;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
document.addEventListener('DOMContentLoaded', function() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updateHeaderCounters();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
    document.addEventListener('click', function(e) {
        console.log('Click event:', e.target, e.target.dataset);
        
        if (e.target.matches('[data-action="add-to-cart"]')) {
            console.log('Add to cart clicked');
            e.preventDefault();
            const productId = parseInt(e.target.dataset.productId);
            const quantityInput = document.getElementById('quantity');
            const quantity = quantityInput ? parseInt(quantityInput.value) : 1;
            console.log('Adding to cart:', productId, quantity);
            addToCart(productId, quantity);
        }
        
        if (e.target.matches('[data-action="remove-from-cart"]')) {
            console.log('Remove from cart clicked');
            e.preventDefault();
            const productId = parseInt(e.target.dataset.productId);
            removeFromCart(productId);
        }
        
        if (e.target.matches('[data-action="toggle-favorite"]')) {
            console.log('Toggle favorite clicked');
            e.preventDefault();
            const productId = parseInt(e.target.dataset.productId);
            toggleFavorite(productId);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º
    document.addEventListener('submit', function(e) {
        if (e.target.matches('form[data-validate="true"]')) {
            if (!validateForm(e.target)) {
                e.preventDefault();
            }
        }
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.updateHeaderCounters = updateHeaderCounters;
window.updateHeaderCountersSimple = updateHeaderCountersSimple;
window.updateProductStatus = updateProductStatus;
window.addToCart = addToCart;
window.removeFromCart = removeFromCart;
window.toggleFavorite = toggleFavorite;
window.showNotification = showNotification;
window.validateEmail = validateEmail;
window.validatePhone = validatePhone;
window.validateForm = validateForm;
window.validateUrl = validateUrl;
window.validateName = validateName;
window.validateAddress = validateAddress;
window.validatePrice = validatePrice;
window.showFieldError = showFieldError;
window.clearFieldError = clearFieldError;
window.syncCartWithServer = syncCartWithServer;
window.syncFavoritesWithServer = syncFavoritesWithServer;

console.log('Functions exported to window:', {
    updateHeaderCounters: typeof window.updateHeaderCounters,
    updateHeaderCountersSimple: typeof window.updateHeaderCountersSimple,
    addToCart: typeof window.addToCart,
    toggleFavorite: typeof window.toggleFavorite,
    showNotification: typeof window.showNotification
});
