<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use App\Services\PdfService;

class TelegramPdfService
{
    private $botToken;
    private $managerChatId;

    public function __construct()
    {
        $this->botToken = env('TELEGRAM_BOT_TOKEN');
        $this->managerChatId = '@antonyuknikita7'; // –í–∞—à Telegram —Ç–µ–≥
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å PDF –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
     */
    public function sendOrderPdfToManager(array $cartItems, float $totalAmount, array $customerData = [])
    {
        try {
            // –°–æ–∑–¥–∞–µ–º PDF
            $pdfService = app(PdfService::class);
            $pdf = $pdfService->generateOrderPdf($cartItems, $totalAmount);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            $orderNumber = 'ORD-' . date('Ymd') . '-' . str_pad(rand(1, 9999), 4, '0', STR_PAD_LEFT);
            $filename = 'order_' . $orderNumber . '_' . date('Y-m-d_H-i-s') . '.pdf';
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            $tempDir = storage_path('app/temp');
            if (!file_exists($tempDir)) {
                mkdir($tempDir, 0755, true);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            $tempPath = $tempDir . '/' . $filename;
            $pdf->save($tempPath);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            $message = $this->formatOrderMessage($orderNumber, $cartItems, $customerData, $totalAmount);
            $this->sendMessage($message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
            $this->sendDocument($tempPath, $filename, $orderNumber);
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if (file_exists($tempPath)) {
                unlink($tempPath);
            }
            
            return [
                'success' => true,
                'order_number' => $orderNumber,
                'message' => 'PDF –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram'
            ];
            
        } catch (\Exception $e) {
            Log::error('Telegram PDF sending error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –≤ Telegram: ' . $e->getMessage()
            ];
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private function sendMessage(string $message)
    {
        $response = Http::post("https://api.telegram.org/bot{$this->botToken}/sendMessage", [
            'chat_id' => $this->managerChatId,
            'text' => $message,
            'parse_mode' => 'HTML'
        ]);

        if (!$response->successful()) {
            Log::error('Telegram message sending failed', [
                'response' => $response->body(),
                'status' => $response->status()
            ]);
        }

        return $response->successful();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç
     */
    private function sendDocument(string $filePath, string $filename, string $orderNumber)
    {
        $response = Http::attach('document', file_get_contents($filePath), $filename)
            ->post("https://api.telegram.org/bot{$this->botToken}/sendDocument", [
                'chat_id' => $this->managerChatId,
                'caption' => "üìÑ PDF –∑–∞–∫–∞–∑–∞ #{$orderNumber}",
                'parse_mode' => 'HTML'
            ]);

        if (!$response->successful()) {
            Log::error('Telegram document sending failed', [
                'response' => $response->body(),
                'status' => $response->status()
            ]);
        }

        return $response->successful();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
     */
    private function formatOrderMessage(string $orderNumber, array $cartItems, array $customerData, float $totalAmount): string
    {
        $message = "üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{$orderNumber}</b>\n\n";
        
        if (!empty($customerData)) {
            $message .= "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>\n";
            if (isset($customerData['name'])) {
                $message .= "‚Ä¢ –ò–º—è: {$customerData['name']}\n";
            }
            if (isset($customerData['telegram_tag'])) {
                $message .= "‚Ä¢ Telegram: {$customerData['telegram_tag']}\n";
            }
            if (isset($customerData['phone'])) {
                $message .= "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {$customerData['phone']}\n";
            }
            if (isset($customerData['address'])) {
                $message .= "‚Ä¢ –ê–¥—Ä–µ—Å: {$customerData['address']}\n";
            }
            $message .= "\n";
        }
        
        $message .= "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n";
        foreach ($cartItems as $item) {
            $message .= "‚Ä¢ {$item['title']} - {$item['price']}‚Ç¨ x {$item['quantity']}\n";
        }
        
        $message .= "\nüí∞ <b>–ò—Ç–æ–≥–æ: {$totalAmount}‚Ç¨</b>\n";
        $message .= "üìÖ " . now()->format('d.m.Y H:i') . "\n\n";
        $message .= "üìÑ <i>PDF —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ</i>";
        
        return $message;
    }
}
